<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jackson Hu&#39;s Blog</title>
  
  <subtitle>...for educational purposes only</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jacksonhu.com/"/>
  <updated>2018-06-11T13:30:15.774Z</updated>
  <id>https://jacksonhu.com/</id>
  
  <author>
    <name>Jackson Ming Hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>My school assignment collections</title>
    <link href="https://jacksonhu.com/2018/06/12/My-school-assignment-collections/"/>
    <id>https://jacksonhu.com/2018/06/12/My-school-assignment-collections/</id>
    <published>2018-06-11T14:02:01.000Z</published>
    <updated>2018-06-11T13:30:15.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>I have started using GitHub when I was still a high school student. After I’ve enrolled into bachelor degree, I have applied a <a href="https://education.github.com/pack" target="_blank" rel="noopener">GitHub Student Pack</a> which allows me to use some advanced functions provided by GitHub like private repositories for free. Since then, some of the assignments were kept in GitHub private repo for syncing and backup purposes between my laptops and desktop PCs. The private repo function is great, it avoids me getting in some academic issues (i.e. someone may copy it and I don’t know).  But in the last internship information sessions held by our school, the coordinators encouraged us to publish our previous assignment to GitHub. I’ve also seen some of my local Australian mates are also publishing their assignments. So I think I’d better release my previous naive code to proof my learning steps anyway.</p><h2 id="The-plan"><a href="#The-plan" class="headerlink" title="The plan"></a>The plan</h2><ol><li>Only the previous assignments will be released. For example, I’m currently doing my Semester 2, Year 2 courses and I will only publish the assignment repos between Semester 1, Year 1 to Semester 1, Year 2.</li><li>Copyrighted course contents are not be included, i.e. no lecture slides, tutorial sheets, assignment specifications, marking guides etc. If you are the staffs/teachers from RMIT and there is any copyrighted contents, please contact me via my email. I will remove it ASAP.</li><li>I have no comment to my previous works. Some of the code are are very naive and stinky. All repos mentioned below are marked as archived, i.e. read-only.</li></ol><h2 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h2><ul><li><p>Programming Technique - COSC1284</p><ul><li>Assignment 1: <a href="https://github.com/huming2207/ProgrammingTech-Assignment1" target="_blank" rel="noopener">huming2207/ProgrammingTech-Assignment1</a></li><li>Assignment 2: <a href="https://github.com/huming2207/ProgrammingTech-A2" target="_blank" rel="noopener">huming2207/ProgrammingTech-A2</a></li></ul></li><li><p>Advanced Programming Technique - COSC1076</p><ul><li>Assignment 1: <a href="https://github.com/huming2207/APTAssignmentOne" target="_blank" rel="noopener">huming2207/APTAssignmentOne</a></li><li>Assignment 2: <a href="https://github.com/huming2207/APTAssignment2" target="_blank" rel="noopener">huming2207/APTAssignment2</a></li></ul></li><li><p>Algorithm &amp; Analysis - COSC2123</p><ul><li>Assignment 1: <a href="https://github.com/huming2207/AA-Assignment1-Testers" target="_blank" rel="noopener">huming2207/AA-Assignment1-Testers</a></li><li>Assignment 2 - My original implementation: <a href="https://github.com/huming2207/AAAssignment2-myown" target="_blank" rel="noopener">huming2207/AAAssignment2-myown</a></li><li>Assignment 2: <a href="https://github.com/huming2207/AAAsssignment2" target="_blank" rel="noopener">huming2207/AAAsssignment2</a></li></ul></li><li><p>Operating System Principles - COSC1114</p><ul><li>Assignment 1 - Userspace syscall demo code: <a href="https://github.com/huming2207/OSP-Assignment1-Demo" target="_blank" rel="noopener">huming2207/OSP-Assignment1-Demo</a></li><li>Assignment 1 - Patched Linux kernel 4.12.4: <a href="https://github.com/huming2207/OSP-Assignment1-Patched-Kernel" target="_blank" rel="noopener">huming2207/OSP-Assignment1-Patched-Kernel</a></li><li>Assignment 2: <a href="https://github.com/huming2207/OSP-Assignment2" target="_blank" rel="noopener">huming2207/OSP-Assignment2</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;&lt;p&gt;I have started using GitHub when I was
      
    
    </summary>
    
    
      <category term="linux" scheme="https://jacksonhu.com/tags/linux/"/>
    
      <category term="uni-life" scheme="https://jacksonhu.com/tags/uni-life/"/>
    
      <category term="assignment" scheme="https://jacksonhu.com/tags/assignment/"/>
    
      <category term="java" scheme="https://jacksonhu.com/tags/java/"/>
    
      <category term="c" scheme="https://jacksonhu.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Compile Android kernel without AOSP buildroot environment</title>
    <link href="https://jacksonhu.com/2017/10/18/Compile-Android-kernel-without-AOSP-buildroot-environment/"/>
    <id>https://jacksonhu.com/2017/10/18/Compile-Android-kernel-without-AOSP-buildroot-environment/</id>
    <published>2017-10-18T12:38:06.000Z</published>
    <updated>2017-10-18T13:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Recently I’ve started a kernel porting project for Xiaomi Mi 6, porting optimisation patches from open source community (e.g. XDA-Developer’s OnePlus 5 forum). Here is a quick note for environment setup and compiling the kernel only without AOSP buildroot.</p><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ol><li><p>Install dependencies: <code>sudo apt install kernel-package git-core</code></p></li><li><p>Download the source: <code>git clone https://github.com/huming2207/Popkern-sagit.git</code></p></li><li>Toolchain setup: you can either try using Android perbuilt toolchains (may not work on my kernel project due to compiler argument in <code>CFLAG</code> is not supported with GCC 4.9), or build by your own with crosstool-ng</li></ol><h2 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h2><ul><li>Set environment variables:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CROSS_COMPILE=aarch64-your-toolchain-name-</span><br><span class="line"><span class="built_in">export</span> ARCH=arm64</span><br></pre></td></tr></table></figure><ul><li>Load configuration file</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make defconfig sagit_user_defconfig</span><br></pre></td></tr></table></figure><ul><li>Build the kernel</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure><h2 id="Creating-flashable-package"><a href="#Creating-flashable-package" class="headerlink" title="Creating flashable package"></a>Creating flashable package</h2><ul><li>Create a DTB-bundled kernel image. Since Xiaomi’s kernel building script somehow messed up, the <code>Image.gz-dtb</code> is the same as <code>Image.gz</code>. So we have to do the merge by our own:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat arch/arm64/boot/Image.gz arch/arm64/boot/dts/qcom/*.dtb &gt; zImage</span><br></pre></td></tr></table></figure><ul><li>Download my package from here, then unzip it:<br><a href="https://github.com/huming2207/Popkern-sagit/releases" target="_blank" rel="noopener">https://github.com/huming2207/Popkern-sagit/releases</a></li><li><p>Replace the <code>zImage</code> file which just generated, re-pack it.</p></li><li><p>Flash to the device and it should works.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;Recently I’ve started a kernel porting project for Xiaomi 
      
    
    </summary>
    
    
      <category term="linux-kernel" scheme="https://jacksonhu.com/tags/linux-kernel/"/>
    
      <category term="linux" scheme="https://jacksonhu.com/tags/linux/"/>
    
      <category term="android" scheme="https://jacksonhu.com/tags/android/"/>
    
      <category term="android-development" scheme="https://jacksonhu.com/tags/android-development/"/>
    
      <category term="english" scheme="https://jacksonhu.com/tags/english/"/>
    
      <category term="english-note" scheme="https://jacksonhu.com/tags/english-note/"/>
    
      <category term="quick-note" scheme="https://jacksonhu.com/tags/quick-note/"/>
    
  </entry>
  
  <entry>
    <title>Android kernel compilation on macOS</title>
    <link href="https://jacksonhu.com/2017/10/13/android-compile-note/"/>
    <id>https://jacksonhu.com/2017/10/13/android-compile-note/</id>
    <published>2017-10-12T22:47:36.000Z</published>
    <updated>2017-10-18T13:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>I’m trying to port some linux kernel optimisation patches from OnePlus 5 to my Xiaomi Mi 6. Here are some quick notes for some issues and errors I’ve encountered.</p><p>Btw here is the kernel repo: <a href="https://github.com/huming2207/sagit-daily-kernel" target="_blank" rel="noopener">https://github.com/huming2207/sagit-daily-kernel</a></p><p>For someone who cares about this kernel, please use with precaution, I’m not sure if it works or not.</p><h1 id="Issue-1"><a href="#Issue-1" class="headerlink" title="Issue 1"></a>Issue 1</h1><h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">build/core/config.mk:608: *** Error: could not find jdk tools.jar </span><br><span class="line">at /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/../lib/tools.jar, </span><br><span class="line">please check <span class="keyword">if</span> your JDK was installed correctly.  Stop.</span><br></pre></td></tr></table></figure><p>Android buildroot script (makefiles) need two Java home path variables to make it works. The variables are <code>JAVA_HOME</code> and <code>ANDROID_JAVA_HOME</code>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p>Add two lines to <code>~/.zshrc</code> or <code>~/.bashrc</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=$(/usr/libexec/java_home -v 1.8)</span><br><span class="line"><span class="built_in">export</span> ANDROID_JAVA_HOME=$(/usr/libexec/java_home -v 1.8)</span><br></pre></td></tr></table></figure><h1 id="Issue-2"><a href="#Issue-2" class="headerlink" title="Issue 2"></a>Issue 2</h1><h2 id="Issue-1"><a href="#Issue-1" class="headerlink" title="Issue"></a>Issue</h2><p>I terminated the iTerm session by mistake, so I didn’t get the full error log. But it should be something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Could not find a supported mac sdk</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Download macOS SDK package from here: <a href="https://github.com/phracker/MacOSX-SDKs/releases" target="_blank" rel="noopener">https://github.com/phracker/MacOSX-SDKs/releases</a></p><p>Then unzip to <code>/Developer/SDKs</code></p><h1 id="Issue-3"><a href="#Issue-3" class="headerlink" title="Issue 3"></a>Issue 3</h1><h2 id="Issue-2"><a href="#Issue-2" class="headerlink" title="Issue"></a>Issue</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">**********************************************</span><br><span class="line">The boot animation could not be generated as</span><br><span class="line">ImageMagick is not installed in your system.</span><br><span class="line"></span><br><span class="line">Please install ImageMagick from this website:</span><br><span class="line">https://imagemagick.org/script/binary-releases.php</span><br><span class="line">**********************************************</span><br><span class="line">./vendor/mk/bootanimation/Android.mk:39: *** stop.</span><br></pre></td></tr></table></figure><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>Install ImageMagick via brew: <code>brew install imagemagick</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;p&gt;I’m trying to port some linux kernel optimisation patches 
      
    
    </summary>
    
    
      <category term="linux-kernel" scheme="https://jacksonhu.com/tags/linux-kernel/"/>
    
      <category term="linux" scheme="https://jacksonhu.com/tags/linux/"/>
    
      <category term="english-note" scheme="https://jacksonhu.com/tags/english-note/"/>
    
      <category term="quick-note" scheme="https://jacksonhu.com/tags/quick-note/"/>
    
      <category term="note" scheme="https://jacksonhu.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Transfer huge amount of source files via network (SCP + GZip)</title>
    <link href="https://jacksonhu.com/2017/10/08/transfer-huge-source-tree-via-scp/"/>
    <id>https://jacksonhu.com/2017/10/08/transfer-huge-source-tree-via-scp/</id>
    <published>2017-10-08T06:45:10.000Z</published>
    <updated>2017-10-18T13:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h1><p>I’ve got a modified AOSP (Mokee, ~50GB with repo cache) need to be transferred from my Mac to my Thinkpad. But macOS does not support linux file systems while Linux does not support apple file systems too.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>After a quick Google, I’ve found a way to solve this issue by using WiFi to transfer. </p><p>Simply transfer the file with SCP/FTP is not fast enough as the source tree is way too large. Here we use GZip to compress the data, then put it to SCP’s pipe, and decompress the data on the target machine.</p><p>The command is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zcvf - mokee | ssh hu@the-damn-thinkpad &quot;cd /home/hu/target/mokee/directory; tar zx&quot;</span><br></pre></td></tr></table></figure><h1 id="Efficiency"><a href="#Efficiency" class="headerlink" title="Efficiency"></a>Efficiency</h1><p>Looks good, 25~35MB/s with 802.11ac (867Mbps, 2x2 MIMO) connection.</p><p><img src="/media/15074458869506.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Scenario&quot;&gt;&lt;a href=&quot;#Scenario&quot; class=&quot;headerlink&quot; title=&quot;Scenario&quot;&gt;&lt;/a&gt;Scenario&lt;/h1&gt;&lt;p&gt;I’ve got a modified AOSP (Mokee, ~50GB with re
      
    
    </summary>
    
    
      <category term="linux" scheme="https://jacksonhu.com/tags/linux/"/>
    
      <category term="english-note" scheme="https://jacksonhu.com/tags/english-note/"/>
    
      <category term="quick-note" scheme="https://jacksonhu.com/tags/quick-note/"/>
    
      <category term="scp" scheme="https://jacksonhu.com/tags/scp/"/>
    
      <category term="ssh" scheme="https://jacksonhu.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Dummy page</title>
    <link href="https://jacksonhu.com/2017/09/27/Dummy-page/"/>
    <id>https://jacksonhu.com/2017/09/27/Dummy-page/</id>
    <published>2017-09-27T08:05:44.000Z</published>
    <updated>2017-10-18T13:11:02.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
